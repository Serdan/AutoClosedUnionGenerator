using System.Linq;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Xunit;

namespace AutoClosedUnionGenerator.Tests;

public class CaseGeneratorTests
{
    private const string UnionClassText = """
        namespace ExhaustiveMatching
        {
            public class AutoClosedAttribute : Attribute { }
        }

        namespace TestNamespace
        {
            [ExhaustiveMatching.AutoClosedAttribute]
            public partial record TokenKind
            {
                partial record Number(string Value);
                partial record Plus;
                partial record Minus;
            }
            
            [ExhaustiveMatching.AutoClosedAttribute]
            public partial class Option<TValue>
            {
                partial class Some(TValue Value);
                partial class None;
            }
        }
        """;

    private const string ExpectedGeneratedRecordText = """
        // <auto-generated/>
        
        using System;
        using ExhaustiveMatching;
        
        namespace TestNamespace;
        
        [Closed(typeof(Number), typeof(Plus), typeof(Minus))]
        abstract public partial record TokenKind
        {
            private TokenKind() { }
        
            public sealed partial record Number: TokenKind;
        
            public sealed partial record Plus: TokenKind;
        
            public sealed partial record Minus: TokenKind;
        
            public static class Cons
            {
                public static TokenKind Number(string Value) => new Number(Value);
        
                public static TokenKind Plus { get; } = new Plus();
        
                public static TokenKind Minus { get; } = new Minus();
            }
        }
        """;

    private const string ExpectedGeneratedClassText = """
        // <auto-generated/>
        
        using System;
        using ExhaustiveMatching;
        
        namespace TestNamespace;
        
        [Closed(typeof(Some), typeof(None))]
        abstract public partial class Option<TValue>
        {
            private Option() { }
        
            public sealed partial class Some: Option<TValue>;
        
            public sealed partial class None: Option<TValue>;
        
            public static class Cons
            {
                public static Option<TValue> Some(TValue Value) => new Some(Value);
        
                public static Option<TValue> None { get; } = new None();
            }
        }
        """;

    [Fact]
    public void GenerateReportMethod()
    {
        // Create an instance of the source generator.
        var generator = new CaseGenerator();

        // Source generators should be tested using 'GeneratorDriver'.
        var driver = CSharpGeneratorDriver.Create(generator);

        // We need to create a compilation with the required source code.
        var compilation = CSharpCompilation.Create(nameof(AutoClosedUnionGenerator),
                                                   new[] { CSharpSyntaxTree.ParseText(UnionClassText) },
                                                   new[]
                                                   {
                                                       // To support 'System.Attribute' inheritance, add reference to 'System.Private.CoreLib'.
                                                       MetadataReference.CreateFromFile(typeof(object).Assembly.Location)
                                                   });

        // Run generators and retrieve all results.
        var runResult = driver.RunGenerators(compilation).GetRunResult();

        var a = from trees in runResult.GeneratedTrees
                where trees.FilePath.EndsWith(".g.cs")
                let text = trees.GetText().ToString()
                select (Name: trees.FilePath.Split('\\').Last(), text);

        var generated = a.ToDictionary(x => x.Name, x => x.text);

        Assert.Equal(ExpectedGeneratedClassText, generated["Option.g.cs"]);
        Assert.Equal(ExpectedGeneratedRecordText, generated["TokenKind.g.cs"]);
    }
}
